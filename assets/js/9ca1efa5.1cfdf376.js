"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2177],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=o.createContext({}),u=function(e){var n=o.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||a;return t?o.createElement(h,i(i({ref:n},c),{},{components:t})):o.createElement(h,i({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},10414:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var o=t(87462),r=t(63366),a=(t(67294),t(3905)),i=["components"],s={title:"@healthblocks-io/apollo"},l=void 0,u={unversionedId:"examples/@healthblocks-io/apollo",id:"examples/@healthblocks-io/apollo",isDocsHomePage:!1,title:"@healthblocks-io/apollo",description:"This package has several hooks to easily access and update user data.",source:"@site/docs/examples/@healthblocks-io/apollo.md",sourceDirName:"examples/@healthblocks-io",slug:"/examples/@healthblocks-io/apollo",permalink:"/docs/examples/@healthblocks-io/apollo",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/examples/@healthblocks-io/apollo.md",tags:[],version:"current",frontMatter:{title:"@healthblocks-io/apollo"}},c=[{value:"useSubscription",id:"usesubscription",children:[],level:3},{value:"useProfile",id:"useprofile",children:[],level:3},{value:"useQuestionnaires",id:"usequestionnaires",children:[],level:3},{value:"useQuestionnaireByName",id:"usequestionnairebyname",children:[],level:3},{value:"saveQuestionnaireResponse",id:"savequestionnaireresponse",children:[],level:3}],p={toc:c};function d(e){var n=e.components,t=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This package has several hooks to easily access and update user data."),(0,a.kt)("h1",{id:"general-utilities"},"General utilities"),(0,a.kt)("h3",{id:"usesubscription"},"useSubscription"),(0,a.kt)("p",null,"A shorthand to use a subscription with a ready to the Apollo Client."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { gql, useSubscription } from '@healthblocks-io/apollo'\n\nconst Greeting = () => {\n  const { data, error } = useSubscription(\n    gql`\n      subscription Profile($uid: uuid!) {\n        users_by_pk(uid: $uid) {\n          name\n        }\n      }\n    `\n  )\n  return <Text>Welcome {data?.users_by_pk?.name || '...'}</Text>\n}\n")),(0,a.kt)("h3",{id:"useprofile"},"useProfile"),(0,a.kt)("p",null,"Even though this hook may fetch more data than you need, it is optimised to only run once while being used in several components."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useProfile } from '@healthblocks-io/apollo'\n\nconst Greeting = () => {\n  const { loading, name, doc } = useProfile()\n  return <Text>Welcome {loading ? '...' : name || doc.name}</Text>\n}\n")),(0,a.kt)("h1",{id:"questionnaires"},"Questionnaires"),(0,a.kt)("h3",{id:"usequestionnaires"},"useQuestionnaires"),(0,a.kt)("p",null,"Only the latest version of published questionnaires are returned"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useQuestionnaires } from '@healthblocks-io/apollo'\n\nconst Greeting = () => {\n  const { data } = useQuestionnaires()\n  return <Text>There are {data?.questionnaires.length} questionnaires</Text>\n}\n")),(0,a.kt)("h3",{id:"usequestionnairebyname"},"useQuestionnaireByName"),(0,a.kt)("p",null,"Only the latest version of a published questionnaire is returned"),(0,a.kt)("p",null,"name === machine/developer readable identifier"),(0,a.kt)("p",null,"title === human readable title"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useQuestionnaireByName } from '@healthblocks-io/apollo'\n\nconst Greeting = () => {\n  const { data } = useQuestionnaireByName('onboarding')\n  return <Text>Title {data?.questionnaires[0]?.title}</Text>\n}\n")),(0,a.kt)("h3",{id:"savequestionnaireresponse"},"saveQuestionnaireResponse"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { saveQuestionnaireResponse } from '@healthblocks-io/apollo'\n\nconst Greeting = () => {\n  const send = () => saveQuestionnaireResponse({ questionnaire_id, answers })\n  return <Button onPress={send}>Send</Button>\n}\n")))}d.isMDXComponent=!0}}]);