"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5289],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(r),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||s;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,i=new Array(s);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},66901:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var n=r(83117),a=r(80102),s=(r(67294),r(3905)),i=["components"],o={title:"Getting started with Express"},p=void 0,l={unversionedId:"guides/express",id:"guides/express",title:"Getting started with Express",description:"Use cases:",source:"@site/docs/guides/express.md",sourceDirName:"guides",slug:"/guides/express",permalink:"/docs/guides/express",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/guides/express.md",tags:[],version:"current",frontMatter:{title:"Getting started with Express"},sidebar:"docs",previous:{title:"Upgrade SDK",permalink:"/docs/guides/upgrade"},next:{title:"Getting started using Expo template app",permalink:"/docs/guides/expo-template-app"}},c={},u=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Steps",id:"steps",level:3}],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Use cases:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Let's make a server rendered application that connects to the Healthblocks API"),(0,s.kt)("li",{parentName:"ul"},"Custom processing of data"),(0,s.kt)("li",{parentName:"ul"},"Trigger push notifications")),(0,s.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/docs/getting-started/project"},"Create a project")," and note down the ",(0,s.kt)("inlineCode",{parentName:"li"},"pid")," (project id)"),(0,s.kt)("li",{parentName:"ul"},"Install node.js")),(0,s.kt)("h3",{id:"steps"},"Steps"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Install express and healthblocks"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"npm install express dotenv @healthblocks-io/server\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Create a server"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"require('dotenv/config')\nconst express = require('express')\nconst app = express()\napp.listen(8080)\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Set environment variables in .env"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"HEALTHBLOCKS_API=https://api.healthblocks.io\nHEALTHBLOCKS_PID=example\nHEALTHBLOCKS_KEY=example\n"))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},"Fetch information from Healthblocks API"),(0,s.kt)("pre",{parentName:"li"},(0,s.kt)("code",{parentName:"pre",className:"language-js"},"app.post('/api/intake', () => {\n  const HB = require('@healthblocks-io/server')\n  const jwt = await HB.auth.verify(req.jwt)\n  const user = await HB.users.get(jwt.sub)\n  const saved = await HB.questionnaire_responses.create({\n    answers: req.body,\n  })\n  const sent = await HB.push.send({\n    to: jwt.sub,\n    body: 'Thanks for the response.',\n  })\n})\n")))))}m.isMDXComponent=!0}}]);