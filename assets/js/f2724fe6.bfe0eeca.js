"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2687],{3905:function(e,t,o){o.d(t,{Zo:function(){return u},kt:function(){return d}});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function l(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?l(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=n.createContext({}),s=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},u=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=s(o),d=r,m=p["".concat(i,".").concat(d)]||p[d]||h[d]||l;return o?n.createElement(m,c(c({ref:t},u),{},{components:o})):n.createElement(m,c({ref:t},u))}));function d(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=o.length,c=new Array(l);c[0]=p;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:r,c[1]=a;for(var s=2;s<l;s++)c[s]=o[s];return n.createElement.apply(null,c)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},68771:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return a},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var n=o(87462),r=o(63366),l=(o(67294),o(3905)),c=["components"],a={title:"@healthblocks-io/core"},i=void 0,s={unversionedId:"examples/@healthblocks-io/core",id:"examples/@healthblocks-io/core",isDocsHomePage:!1,title:"@healthblocks-io/core",description:"@healthblocks-io/core/app",source:"@site/docs/examples/@healthblocks-io/core.md",sourceDirName:"examples/@healthblocks-io",slug:"/examples/@healthblocks-io/core",permalink:"/docs/examples/@healthblocks-io/core",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/examples/@healthblocks-io/core.md",tags:[],version:"current",frontMatter:{title:"@healthblocks-io/core"},sidebar:"docs",previous:{title:"Upgrade SDK",permalink:"/docs/guides/upgrade"},next:{title:"@healthblocks-io/apollo",permalink:"/docs/examples/@healthblocks-io/apollo"}},u=[{value:"@healthblocks-io/core/app",id:"healthblocks-iocoreapp",children:[],level:3},{value:"@healthblocks-io/core/auth",id:"healthblocks-iocoreauth",children:[],level:3},{value:"@healthblocks-io/core/project",id:"healthblocks-iocoreproject",children:[],level:3},{value:"@healthblocks-io/core/theme",id:"healthblocks-iocoretheme",children:[],level:3},{value:"@healthblocks-io/core/upload",id:"healthblocks-iocoreupload",children:[],level:3}],h={toc:u};function p(e){var t=e.components,o=(0,r.Z)(e,c);return(0,l.kt)("wrapper",(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h3",{id:"healthblocks-iocoreapp"},"@healthblocks-io/core/app"),(0,l.kt)("p",null,"This store should be initialized when the application starts."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useHealthblocks, initialize } from '@healthblocks/core/app'\n\ninitialize({\n  pid: 'dr-corona',\n})\n\n// TODO: considering <HealthblocksProvider> (doesn't exist)\n")),(0,l.kt)("h3",{id:"healthblocks-iocoreauth"},"@healthblocks-io/core/auth"),(0,l.kt)("p",null,"This store contains data related to sign in, JWT tokens, refresh tokens. ",(0,l.kt)("inlineCode",{parentName:"p"},"setAuth()")," accepts a JWT token or an AuthState object which typically looks like ",(0,l.kt)("inlineCode",{parentName:"p"},'{ id_token: "..." }')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { signInAnonymously, useAuth, useUser } from '@healthblocks/core/auth'\n\nconst SignIn = () => (\n  <Button onPress={() => signInAnonymously(email, password)} />\n)\n\nconst SignInScreen = () => {\n  const { id_token, loading, signInError } = useAuth()\n  const { sub, name, email } = useUser() // Decoded JWT\n}\n")),(0,l.kt)("h3",{id:"healthblocks-iocoreproject"},"@healthblocks-io/core/project"),(0,l.kt)("p",null,"This store contains a cache of projects that have been opened. This will allow to switch between projects on the fly. This store might subscribe to the current project data, currently it does not."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useProject } from '@healthblocks/core/project'\n\nconst Greeting = () => {\n  const project = useProject()\n  return <Text>Welcome to {project.config.appName}</Text>\n}\n")),(0,l.kt)("h3",{id:"healthblocks-iocoretheme"},"@healthblocks-io/core/theme"),(0,l.kt)("p",null,"This module provides helpers & hooks for the current theme"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useTheme } from '@healthblocks/core/theme'\n\nconst RocketLauncher = () => {\n  const theme = useTheme()\n  return <Button style={{ color: theme.color.primary }}>Launch</Button>\n}\n")),(0,l.kt)("h3",{id:"healthblocks-iocoreupload"},"@healthblocks-io/core/upload"),(0,l.kt)("p",null,"This module allows users to safely upload personal images."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},"import { upload, useSignedURL } from '@healthblocks/core/upload'\n\nconst Camera = () => {\n  const takePicture = () => {\n    const file = await cameraRef.takePictureAsync()\n    const selfie = await upload(file)\n    // await updateProfile({ selfie })\n  }\n  return <Button onPress={takePicture}>Take picture</Button>\n}\n\nconst Avatar = () => {\n  const sign = useSignedURL()\n  const doc = useProfile()\n  return <Image source={{ uri: sign(doc.selfie.url) }} />\n}\n")))}p.isMDXComponent=!0}}]);