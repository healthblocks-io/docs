"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6044],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var s=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,s,r=function(e,n){if(null==e)return{};var t,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)t=o[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=s.createContext({}),l=function(e){var n=s.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return s.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},m=s.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,h=m["".concat(u,".").concat(d)]||m[d]||p[d]||o;return t?s.createElement(h,i(i({ref:n},c),{},{components:t})):s.createElement(h,i({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var a={};for(var u in n)hasOwnProperty.call(n,u)&&(a[u]=n[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var l=2;l<o;l++)i[l]=t[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},19386:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var s=t(87462),r=t(63366),o=(t(67294),t(3905)),i=["components"],a={title:"Conversational Assessment"},u=void 0,l={unversionedId:"blocks/conversational-assessment",id:"blocks/conversational-assessment",isDocsHomePage:!1,title:"Conversational Assessment",description:"What is Conversational Assessment?",source:"@site/docs/blocks/conversational-assessment.md",sourceDirName:"blocks",slug:"/blocks/conversational-assessment",permalink:"/docs/blocks/conversational-assessment",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/blocks/conversational-assessment.md",tags:[],version:"current",frontMatter:{title:"Conversational Assessment"},sidebar:"docs",previous:{title:"Content Suggestions",permalink:"/docs/blocks/content-suggestions"},next:{title:"Health Profile",permalink:"/docs/blocks/health-profile"}},c=[{value:"Prerequisites",id:"prerequisites",children:[],level:3},{value:"Leverage the Questionnaire component",id:"leverage-the-questionnaire-component",children:[],level:3},{value:"Customize the questions",id:"customize-the-questions",children:[],level:3},{value:"Custom questionnaire renderer",id:"custom-questionnaire-renderer",children:[],level:3},{value:"Submit a response",id:"submit-a-response",children:[],level:3},{value:"Show my previous responses",id:"show-my-previous-responses",children:[],level:3}],p={toc:c};function m(e){var n=e.components,t=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,s.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"What is ",(0,o.kt)("em",{parentName:"p"},"Conversational Assessment"),"?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An assessment is a set of questions that aim to improve the understanding of the condition of the patient."),(0,o.kt)("li",{parentName:"ul"},"Conversational means that the questions are triggered one by one, as if you would have a conversation in person.")),(0,o.kt)("p",null,'FHIR uses the term "questionnaire", which is the term we will use in a technical context.'),(0,o.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a questionnaire in the questionnaire builder, note down the questionnaire ID."),(0,o.kt)("li",{parentName:"ul"},"Prepare a screen where the user is ",(0,o.kt)("a",{parentName:"li",href:"/docs/blocks/authentication"},"authenticated"),".")),(0,o.kt)("h3",{id:"leverage-the-questionnaire-component"},"Leverage the Questionnaire component"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"<Questionnaire>")," component to ask a set of questions. The ",(0,o.kt)("inlineCode",{parentName:"p"},"<NamedQuestionnaireProvider>")," takes care of loading the questionnaire and configuring the submit handler."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { NamedQuestionnaireProvider } from '@healthblocks-io/apollo/questionnaire'\nimport Questionnaire from '@healthblocks-io/native/Questionnaire'\n\nfunction Example (props) {\n  return (\n    <NamedQuestionnaireProvider\n      name=\"intake\"\n      onClose={props.navigation.goBack}\n    >\n      <Questionnaire />\n    </NamedQuestionnaireProvider>\n  )\n}\n")),(0,o.kt)("h3",{id:"customize-the-questions"},"Customize the questions"),(0,o.kt)("p",null,"If some questions are not relevant based on previous answers, consider removing those using the ",(0,o.kt)("inlineCode",{parentName:"p"},"transform")," prop. Any transformation is possible: add, remove, reorder, translate questions... or even custom quick replies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'function Example (props) {\n  return (\n    <NamedQuestionnaireProvider\n      name="intake"\n      transform={({ questionnaire}) => ({\n        ...questionnaire,\n        // Skip the last 3 questions\n        questions: questionnaire.questions.slice(-3)\n      })}\n    >\n      <Questionnaire />\n    </NamedQuestionnaireProvider>\n  )\n}\n')),(0,o.kt)("h3",{id:"custom-questionnaire-renderer"},"Custom questionnaire renderer"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"useQuestionnaireByName")," hook returns a list of matching questionnaires."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useQuestionnaireByName } from \'@healthblocks-io/core/content\'\n\nfunction Example () {\n  const [questionnaire] = useQuestionnaireByName(\'intake\')\n  return (\n    <div className="questionnaire">\n      {questionnaire?.questions.map((question, key) => (\n        <div className="question" key={key}>\n          #{key + 1}: {question.text}\n          {question.config?.replies?.map((reply, key) => (\n            <div className="reply" key={key}>\n              #{key + 1}: {reply.title}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n')),(0,o.kt)("h3",{id:"submit-a-response"},"Submit a response"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useQuestionnaireByName } from '@healthblocks-io/core/content'\nimport { saveQuestionnaireResponseActivity, Answer } from '@healthblocks-io/apollo/questionnaire'\n\nconst Questionnaire = () => {\n  const [questionnaire] = useQuestionnaireByName('intake')\n  const [answers] = useState<Answer[]>([{ text: 'Good', question_id: 'abc' }])\n\n  const client = useApolloClient()\n  const submit = async () => {\n    await saveQuestionnaireResponseActivity(client, {\n      answers,\n      questionnaire_id: questionnaire!.id,\n    })\n    alert('Success!')\n  }\n\n  return (\n    <div className=\"questionnaire\">\n      ...\n      <button onClick={submit}>Submit my response</button>\n    </div>\n  )\n}\n")),(0,o.kt)("p",null,"An alternative would be to store the response in FHIR. This currently does not show up in the dashboard Calendar."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useQuestionnaireByName } from '@healthblocks-io/core/content'\nimport { useFHIR } from '@healthblocks-io/core/fhir'\n\nconst Questionnaire = () => {\n  const [questionnaire] = useQuestionnaireByName('intake')\n  const [answers] = useState([{ text: 'Good', question_id: 'abc' }])\n\n  const { create } = useFHIR()\n  const submit = async () => {\n    await create({\n      resourceType: 'QuestionnaireResponse',\n      answers,\n      questionnaire_id: questionnaire!.id,\n    })\n    alert('Success!')\n  }\n\n  return (\n    <div className=\"questionnaire\">\n      ...\n      <button onClick={submit}>Submit my response</button>\n    </div>\n  )\n}\n")),(0,o.kt)("h3",{id:"show-my-previous-responses"},"Show my previous responses"),(0,o.kt)("p",null,"Let's see if the response was actually saved by creating a page that shows all responses."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useSearch } from \'@healthblocks-io/core/fhir\'\n\nfunction Responses () {\n  const { data, error, loading } = useSearch<QuestionnaireResponse>({\n    type: \'QuestionnaireResponse\',\n  })\n\n  return (\n    <div className="responses">\n      {data?.entry.map((response, key) => (\n        <div className="response" key={key}>\n          {response.questionnaire.title}\n          {response.answers.map((answer) => (\n            <div className="response" key={key}>\n              {answer.text}\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n')))}m.isMDXComponent=!0}}]);