"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9450],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var o=t(67294);function c(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){c(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,c=function(e,n){if(null==e)return{};var t,o,c={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(c[t]=e[t]);return c}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(c[t]=e[t])}return c}var s=o.createContext({}),l=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,c=e.mdxType,r=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=c,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return t?o.createElement(h,a(a({ref:n},p),{},{components:t})):o.createElement(h,a({ref:n},p))}));function d(e,n){var t=arguments,c=n&&n.mdxType;if("string"==typeof e||c){var r=t.length,a=new Array(r);a[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:c,a[1]=i;for(var l=2;l<r;l++)a[l]=t[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},94908:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return m}});var o=t(87462),c=t(63366),r=(t(67294),t(3905)),a=["components"],i={title:"Custom Icon"},s=void 0,l={unversionedId:"examples/@healthblocks-io/native/Icon",id:"examples/@healthblocks-io/native/Icon",isDocsHomePage:!1,title:"Custom Icon",description:"The Icon component receives the name of icon as prop. The name can be any of the 28 built-in icons. The Button component accepts the same icon names, also the custom ones.",source:"@site/docs/examples/@healthblocks-io/native/Icon.md",sourceDirName:"examples/@healthblocks-io/native",slug:"/examples/@healthblocks-io/native/Icon",permalink:"/docs/examples/@healthblocks-io/native/Icon",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/examples/@healthblocks-io/native/Icon.md",tags:[],version:"current",frontMatter:{title:"Custom Icon"}},p=[{value:"Adding custom icons",id:"adding-custom-icons",children:[],level:3},{value:"Recommended",id:"recommended",children:[],level:3},{value:"Custom icon viewBox",id:"custom-icon-viewbox",children:[],level:3}],u={toc:p};function m(e){var n=e.components,t=(0,c.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Icon component receives the name of icon as prop. The name can be any of the 28 built-in icons. The Button component accepts the same icon names, also the custom ones."),(0,r.kt)("h3",{id:"adding-custom-icons"},"Adding custom icons"),(0,r.kt)("p",null,"The starting template already contains some examples of custom icons. Check out src/components/CustomIcon, that is also the place to add more."),(0,r.kt)("p",null,"The idea is that you reuse the same Icon component, but at the start of the app, add/replace icons in the underlying icon set: ",(0,r.kt)("inlineCode",{parentName:"p"},"icons"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'// src/components/CustomIcon.tsx\n\n// icons is an object where every value contains the contents of an SVG element\nimport { icons } from \'@healthblocks-io/native/Icon\'\n\n// mutate the object\nicons.myCustomIcon = (\n  <Path\n    d="M20 6L9 17l-5-5"\n    stroke="currentColor"\n    strokeWidth="3"\n    strokeLinecap="round"\n    strokeLinejoin="round"\n  />\n)\n')),(0,r.kt)("p",null,"You can import ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/Icon")," once in App.tsx and ",(0,r.kt)("inlineCode",{parentName:"p"},"myCustomIcon")," is now available in all places that show icons."),(0,r.kt)("h3",{id:"recommended"},"Recommended"),(0,r.kt)("p",null,"To make the dependency on custom icons clearer, it's also possible to re-export the Icon component like this:"),(0,r.kt)("p",null,"This way, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"@healthblocks-io/native/Icon")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"src/components/Icon")," interchangeably, just don't forget to import src/components/Icon at least once!"),(0,r.kt)("h3",{id:"custom-icon-viewbox"},"Custom icon viewBox"),(0,r.kt)("p",null,"The icon viewBox is expected to be 24x24, if that doesn't work for you icon, you can override the viewBox for an icon like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// src/components/CustomIcon.tsx\nimport { viewBoxes } from '@healthblocks-io/native/Icon'\nviewBoxes.add('myCustomIcon', '0 0 18 18')\n")),(0,r.kt)("p",null,"Alternatively you can apply it case per case:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'<Icon icon="myCustomIcon" viewBox="0 0 18 18" />\n')))}m.isMDXComponent=!0}}]);