"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[568],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),k=l,m=d["".concat(p,".").concat(k)]||d[k]||c[k]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},11764:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],o={title:"Analytics"},p=void 0,s={unversionedId:"blocks/analytics-tracking-events",id:"blocks/analytics-tracking-events",isDocsHomePage:!1,title:"Analytics",description:"To build an amazing patient experience it's vitally important to understand the patient behaviour. An important tool for learning about usage is the analytics block. The dashboard and template-app track many user actions.",source:"@site/docs/blocks/analytics-tracking-events.md",sourceDirName:"blocks",slug:"/blocks/analytics-tracking-events",permalink:"/docs/blocks/analytics-tracking-events",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/blocks/analytics-tracking-events.md",tags:[],version:"current",frontMatter:{title:"Analytics"},sidebar:"docs",previous:{title:"Care Plan",permalink:"/docs/blocks/care-plan-activities"},next:{title:"Mixpanel",permalink:"/docs/blocks/mixpanel"}},u=[{value:"Prerequisites",id:"prerequisites",children:[],level:3},{value:"Provider setup",id:"provider-setup",children:[],level:3},{value:"Page as property",id:"page-as-property",children:[],level:3},{value:"Custom event handler",id:"custom-event-handler",children:[],level:3},{value:"Standardized events",id:"standardized-events",children:[{value:"template-app",id:"template-app",children:[],level:3},{value:"@healthblocks-io/native",id:"healthblocks-ionative",children:[],level:3},{value:"Conversation component",id:"conversation-component",children:[],level:3}],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To build an amazing patient experience it's vitally important to understand the patient behaviour. An important tool for learning about usage is the analytics block. The dashboard and template-app track many user actions. "),(0,r.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Configure a mixpanel token in project configuration when using MixpanelProvider.")),(0,r.kt)("h3",{id:"provider-setup"},"Provider setup"),(0,r.kt)("p",null,"You app may be emitting tracking events, but unless you wrap it in a provider, those events won't be saved.",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"<AnalyticsProvider>")," delivers events to the Healthblocks API.\n",(0,r.kt)("inlineCode",{parentName:"p"},"<MixpanelProvider>")," delivers events to the Mixpanel API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"<AnalyticsProvider>\n  <MixpanelProvider>\n    <App />\n  </MixpanelProvider>\n</AnalyticsProvider>\n")),(0,r.kt)("h3",{id:"page-as-property"},"Page as property"),(0,r.kt)("p",null,"When you want to track everything that happens on a speicific page, it may be cumbersome to add special cases all over your components. ",(0,r.kt)("inlineCode",{parentName:"p"},"AnalyticsDataProvider")," to the rescue. All events that are triggered by the children of this component will include the extra properties from the provider."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"const Calendar = () => (\n  <AnalyticsDataProvider properties={{ page: 'Calendar' }}>\n    <CalendarPage />\n  </AnalyticsDataProvider>\n)\n")),(0,r.kt)("h3",{id:"custom-event-handler"},"Custom event handler"),(0,r.kt)("p",null,"The AnalyticsProvider does not actually wrap its children in a context. It uses the underlying Hook context to emit events. You can handle all events by listening to the global event emitter: ",(0,r.kt)("inlineCode",{parentName:"p"},"useContext(Hook)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { ReactNode } from 'react'\nimport { Hook } from '@healthblocks/core/hook'\n\nfunction AnalyticsLogger ({ children }: { children: ReactNode }) {\n  const hook = useContext(Hook)\n  const track = useCallback((data: Partial<TrackData>) => console.log('track', data), [])\n  hook.on('track', track, [track])\n  return <>{children}</>\n}\n\nconst Calendar = () => (\n  <AnalyticsLogger>\n    <CalendarPage />\n  </AnalyticsLogger>\n)\n")),(0,r.kt)("h2",{id:"standardized-events"},"Standardized events"),(0,r.kt)("p",null,"We would like to automate behaviour analysis, therefor we recommended to use the event names below. Try to stick to a similar naming scheme: ",(0,r.kt)("inlineCode",{parentName:"p"},"[Noun] [Verb]")," with a past tense verb."),(0,r.kt)("h3",{id:"template-app"},"template-app"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"App Started")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user starts the app")),(0,r.kt)("h3",{id:"healthblocks-ionative"},"@healthblocks-io/native"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Onboarding Completed")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When going through the 3 introductory screens (or skipping), this is always anonymous")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Navigate")," \u21d2 { route }"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user changes the tab or opens an article")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Profile Updated")," \u21d2 profile_key = name, email, birthdate, language, timezone, ..."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user profile is updated")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Question Answered")," \u21d2 { question_id, value }"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user answers a question, fid is the custom field id, value is the answer")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Article Opened")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user navigates to an article")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Article Expanded")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'When the user clicks "Read more" at the bottom of a article')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Article Collapsed")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user navigates away from an article")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Article Page In")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user opens a page of an expanded article")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Article Page Out")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user leaves a page of an expanded article")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Article Link Opened")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'When the user clicks "Learn more" to open a URL on an article')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Article Flow Started")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user starts an assessment from a CTA on an article")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Medication Created")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user confirms the creation of a medication reminder")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Medication Updated")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user changes a medication reminder")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Medication Removed")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user removes a medication remineer")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Medication Statement Created")," \u21d2 { medication_name, planned_time }"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user toggles a medication statement")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Medication Statement Removed")," \u21d2 { medication_name, planned_time }"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user undoes a medication statement")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Reminder Sent")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the backend sends a reminder notification, typically for the daily checkin")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Notification Sent")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the backend sends a notification, typically for a HITL message")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Notification Received")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the app is opened while a notification is received")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Notification Opened")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user interacts with a received notification")),(0,r.kt)("h3",{id:"conversation-component"},"Conversation component"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Flow Started")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user starts a new flow")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Flow Completed")," \u21d2 { flow }"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When the user answers the last question of a flow")),(0,r.kt)("p",null,"Flow Opened"),(0,r.kt)("p",null,"Flow Closed"))}d.isMDXComponent=!0}}]);