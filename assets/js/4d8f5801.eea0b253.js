"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[692],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},24228:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return p}});var r=n(83117),a=n(80102),i=(n(67294),n(3905)),o=["components"],s={title:"Secure Authentication"},l=void 0,u={unversionedId:"blocks/authentication",id:"blocks/authentication",title:"Secure Authentication",description:"Healthblocks Authentication is based on a rotating JWT token.",source:"@site/docs/blocks/authentication.md",sourceDirName:"blocks",slug:"/blocks/authentication",permalink:"/docs/blocks/authentication",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/blocks/authentication.md",tags:[],version:"current",frontMatter:{title:"Secure Authentication"},sidebar:"docs",previous:{title:"Integration",permalink:"/docs/concepts/integration"},next:{title:"Content Suggestions",permalink:"/docs/blocks/content-suggestions"}},c={},p=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Example",id:"example",level:3},{value:"Available hooks",id:"available-hooks",level:3}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Healthblocks Authentication is based on a rotating JWT token."),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Configure an authenticator in the admin dashboard. When using a project level authenticator, you must wrap the auth provider inside a project provider.")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"First wrap your app in ",(0,i.kt)("inlineCode",{parentName:"p"},"<AuthProvider>")," (inside ",(0,i.kt)("inlineCode",{parentName:"p"},"<ProjectProvider>"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { ProjectProvider } from '@healthblocks-io/core/project'\nimport { AuthProvider } from '@healthblocks-io/core/auth'\n\nconst App = () => {\n  return (\n    <ProjectProvider pid=\"example\">\n      <AuthProvider>\n        <Screens />\n      </AuthProvider>\n    </ProjectProvider>\n  )\n}\n")),(0,i.kt)("p",null,"Now only show the sign in screen when the user is not logged in yet."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useAuth, useUser } from '@healthblocks-io/core/auth'\n\nconst Screens = () => {\n  const auth = useAuthState()\n  if (!auth) {\n    return <SignInScreen />\n  }\n  return <div>Logged in with user id {user.sub}</div>\n}\n\nconst SignInScreen = () => {\n  const { signInWithEmailAndPassword, createUserWithEmailAndPassword } =\n    useAuthActions()\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  return (\n    <div>\n      <input placeholder=\"email\" onChange={evt => setEmail(evt.target.value)} />\n      <input\n        placeholder=\"password\"\n        onChange={evt => setPassword(evt.target.value)}\n      />\n      <button onClick={() => signInWithEmailAndPassword(email, password)}>\n        Sign in\n      </button>\n      <button onClick={() => createUserWithEmailAndPassword(email, password)}>\n        Register\n      </button>\n    </div>\n  )\n}\n")),(0,i.kt)("h3",{id:"available-hooks"},"Available hooks"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useAuth")," returns the complete auth context."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"data.current")," has the current auth state."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"next()")," returns a valid access token (refreshed if needed, deduplicated)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"setData(data, persist)")," updates the auth state and optionally saves it to storage."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signOut()")," forgets the auth tokens.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useAuthState")," returns the current auth state."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"access_token")," is the token that fits in a header like ",(0,i.kt)("inlineCode",{parentName:"li"},"Authorization: Bearer <access_token>"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"refresh_token")," is used to get a new access token.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useAuthActions")," returns useful sign in methods."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"signInWithEmailAndPassword(email, password)")," is a way to sign in using Auth0 email/password."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"createUserWithEmailAndPassword(email, password)")," is a way to create an account using email/password."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sendPasswordResetEmail(email)")," sends a password reset email."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resetPassword(key, email)")," sets a new password based on the token from a password reset email.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"useUser")," returns the decoded access_token of the currently logged in user."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sub")," is a unique combination of userId and projectId."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"userId")," is original userId."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"projectId")," is null for server admins and a specific projectId for project level users like patients."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"authenticatorId")," refers to the authenticator that was used to sign in.")))}m.isMDXComponent=!0}}]);