"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7687],{3905:function(e,n,r){r.d(n,{Zo:function(){return u},kt:function(){return f}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=t.createContext({}),s=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=s(e.components);return t.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=s(r),f=o,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||a;return r?t.createElement(m,i(i({ref:n},u),{},{components:r})):t.createElement(m,i({ref:n},u))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},82866:function(e,n,r){r.r(n),r.d(n,{assets:function(){return u},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var t=r(83117),o=r(80102),a=(r(67294),r(3905)),i=["components"],c={sidebar_label:"Calendar",title:"Calendar screen"},l=void 0,s={unversionedId:"expo/screens/Calendar",id:"expo/screens/Calendar",title:"Calendar screen",description:"This screen shows a list of activities in chronological order, grouped by day. The list is infinitely scrollable in both directions.",source:"@site/docs/expo/screens/Calendar.md",sourceDirName:"expo/screens",slug:"/expo/screens/Calendar",permalink:"/docs/expo/screens/Calendar",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/expo/screens/Calendar.md",tags:[],version:"current",frontMatter:{sidebar_label:"Calendar",title:"Calendar screen"},sidebar:"docs",previous:{title:"Screens",permalink:"/docs/expo/screens"},next:{title:"Chat",permalink:"/docs/expo/screens/Chat"}},u={},p=[],d={toc:p};function f(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This screen shows a list of activities in chronological order, grouped by day. The list is infinitely scrollable in both directions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useSearch } from '@healthblocks-io/core/fhir'\nimport Calendar from '@healthblocks-io/native/Calendar'\nimport { CalendarContext } from '@healthblocks-io/native/CalendarContext'\nimport Loading from '@healthblocks-io/native/Loading'\n\nexport default function CalendarLoadingScreen() {\n  // Query relevant data\n  const search = useSearch<CarePlanActivity>({ type: 'CarePlan.Activity' })\n  const activities = search.data?.entry\n\n  // Context for actions on the cards\n  const value = useMemo(() => ({ refresh: () => search.mutate() }), [])\n\n  // Show error state\n  if (search.error) return null\n\n  // Show loading state\n  if (!activities) return <Loading />\n\n  // Show empty state\n  if (!activities.length) return null\n\n  return (\n    <CalendarContext.Provider value={value}>\n      <Calendar activities={activities} />\n    </CalendarContext.Provider>\n  )\n}\n")))}f.isMDXComponent=!0}}]);