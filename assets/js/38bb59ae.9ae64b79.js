"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3686],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=c(n),m=r,d=h["".concat(s,".").concat(m)]||h[m]||p[m]||a;return n?o.createElement(d,i(i({ref:t},u),{},{components:n})):o.createElement(d,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},14348:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var o=n(83117),r=n(80102),a=(n(67294),n(3905)),i=["components"],l={title:"Questionnaires on web"},s=void 0,c={unversionedId:"examples/web-questionnaires",id:"examples/web-questionnaires",title:"Questionnaires on web",description:"Building a questionnaire on web",source:"@site/docs/examples/web-questionnaires.md",sourceDirName:"examples",slug:"/examples/web-questionnaires",permalink:"/docs/examples/web-questionnaires",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/examples/web-questionnaires.md",tags:[],version:"current",frontMatter:{title:"Questionnaires on web"}},u={},p=[{value:"Building a questionnaire on web",id:"building-a-questionnaire-on-web",level:3},{value:"@healthblocks-io/core/auth",id:"healthblocks-iocoreauth",level:3},{value:"@healthblocks-io/core/project",id:"healthblocks-iocoreproject",level:3},{value:"@healthblocks-io/core/theme",id:"healthblocks-iocoretheme",level:3},{value:"@healthblocks-io/core/upload",id:"healthblocks-iocoreupload",level:3}],h={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"building-a-questionnaire-on-web"},"Building a questionnaire on web"),(0,a.kt)("p",null,"This store should be initialized when the application starts."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useHealthblocks, initialize } from '@healthblocks-io/core/app'\n\ninitialize({\n  pid: 'dr-corona',\n})\n\n// TODO: considering <HealthblocksProvider> (doesn't exist)\n")),(0,a.kt)("h3",{id:"healthblocks-iocoreauth"},"@healthblocks-io/core/auth"),(0,a.kt)("p",null,"This store contains data related to sign in, JWT tokens, refresh tokens. ",(0,a.kt)("inlineCode",{parentName:"p"},"setAuth()")," accepts a JWT token or an AuthState object which typically looks like ",(0,a.kt)("inlineCode",{parentName:"p"},'{ id_token: "..." }')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { signInAnonymously, useAuth, useUser } from '@healthblocks-io/core/auth'\n\nconst SignIn = () => (\n  <Button onPress={() => signInAnonymously(email, password)} />\n)\n\nconst SignInScreen = () => {\n  const { id_token, loading, signInError } = useAuth()\n  const { sub, name, email } = useUser() // Decoded JWT\n}\n")),(0,a.kt)("h3",{id:"healthblocks-iocoreproject"},"@healthblocks-io/core/project"),(0,a.kt)("p",null,"This store contains a cache of projects that have been opened. This will allow to switch between projects on the fly. This store might subscribe to the current project data, currently it does not."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useProject } from '@healthblocks-io/core/project'\n\nconst Greeting = () => {\n  const project = useProject()\n  return <Text>Welcome to {project.config.appName}</Text>\n}\n")),(0,a.kt)("h3",{id:"healthblocks-iocoretheme"},"@healthblocks-io/core/theme"),(0,a.kt)("p",null,"This module provides helpers & hooks for the current theme"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useTheme } from '@healthblocks-io/core/theme'\n\nconst RocketLauncher = () => {\n  const theme = useTheme()\n  return <Button style={{ color: theme.color.primary }}>Launch</Button>\n}\n")),(0,a.kt)("h3",{id:"healthblocks-iocoreupload"},"@healthblocks-io/core/upload"),(0,a.kt)("p",null,"This module allows users to safely upload personal images."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { upload, useSignedURL } from '@healthblocks-io/core/upload'\n\nconst Camera = () => {\n  const takePicture = () => {\n    const file = await cameraRef.takePictureAsync()\n    const selfie = await upload(file)\n    // await updateProfile({ selfie })\n  }\n  return <Button onPress={takePicture}>Take picture</Button>\n}\n\nconst Avatar = () => {\n  const sign = useSignedURL()\n  const doc = useProfile()\n  return <Image source={{ uri: sign(doc.selfie.url) }} />\n}\n")))}m.isMDXComponent=!0}}]);