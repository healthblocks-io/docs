"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7792],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(t),d=o,f=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},99378:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],l={sidebar_label:"Consent",title:"Consent screen"},s=void 0,c={unversionedId:"expo/screens/Consent",id:"expo/screens/Consent",title:"Consent screen",description:"This screen lets a user visit the privacy and terms URL.",source:"@site/docs/expo/screens/Consent.md",sourceDirName:"expo/screens",slug:"/expo/screens/Consent",permalink:"/docs/expo/screens/Consent",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/expo/screens/Consent.md",tags:[],version:"current",frontMatter:{sidebar_label:"Consent",title:"Consent screen"},sidebar:"docs",previous:{title:"Chat",permalink:"/docs/expo/screens/Chat"},next:{title:"Questionnaire",permalink:"/docs/expo/screens/Questionnaire"}},p={},u=[{value:"Example usage",id:"example-usage",level:3}],m={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This screen lets a user visit the privacy and terms URL.\nThe user can then agree by checking off a checkbox and pressing the submit button.\nAt that point, the ",(0,a.kt)("inlineCode",{parentName:"p"},"onAccept")," callback is triggered."),(0,a.kt)("p",null,"This page contains the following translation keys:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"consent_title")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"consent_intro")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"consent_body")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Read")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"the privacy policy")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"and")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"the terms and conditions")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"I understand")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Ready to get started?")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Let's go"))),(0,a.kt)("h3",{id:"example-usage"},"Example usage"),(0,a.kt)("p",null,"Here is a simplified version of how this component is used in the template app:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useLocal } from '@healthblocks-io/core/local'\nimport PrivacyConsent from '@healthblocks-io/native/Consent'\n\nfunction App() {\n  // Load most important data from async storage\n  const localState = useLocal()\n  if (!localState) return null\n  const [local, setLocal] = localState\n\n  // Require language selection\n  if (!local.language) return ...\n\n  // Require onboarding\n  if (!local.onboarding) return ...\n\n  // Store the date of consent to allow for future updates to the terms\n  if (!local.consent) {\n    return (\n      <PrivacyConsent\n        onAccept={() => setLocal({ consent: new Date().toJSON() })}\n      />\n    )\n  }\n}\n")))}d.isMDXComponent=!0}}]);