"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2687],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var o=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},c=Object.keys(e);for(o=0;o<c.length;o++)r=c[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)r=c[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var i=o.createContext({}),s=function(e){var t=o.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=s(e.components);return o.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,c=e.originalType,i=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),h=s(r),m=n,f=h["".concat(i,".").concat(m)]||h[m]||p[m]||c;return r?o.createElement(f,l(l({ref:t},u),{},{components:r})):o.createElement(f,l({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=r.length,l=new Array(c);l[0]=h;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:n,l[1]=a;for(var s=2;s<c;s++)l[s]=r[s];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}h.displayName="MDXCreateElement"},68771:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return a},metadata:function(){return s},toc:function(){return p}});var o=r(83117),n=r(80102),c=(r(67294),r(3905)),l=["components"],a={title:"@healthblocks-io/core"},i=void 0,s={unversionedId:"examples/@healthblocks-io/core",id:"examples/@healthblocks-io/core",title:"@healthblocks-io/core",description:"@healthblocks-io/core/theme",source:"@site/docs/examples/@healthblocks-io/core.md",sourceDirName:"examples/@healthblocks-io",slug:"/examples/@healthblocks-io/core",permalink:"/docs/examples/@healthblocks-io/core",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/examples/@healthblocks-io/core.md",tags:[],version:"current",frontMatter:{title:"@healthblocks-io/core"}},u={},p=[{value:"@healthblocks-io/core/theme",id:"healthblocks-iocoretheme",level:3},{value:"@healthblocks-io/core/upload",id:"healthblocks-iocoreupload",level:3}],h={toc:p};function m(e){var t=e.components,r=(0,n.Z)(e,l);return(0,c.kt)("wrapper",(0,o.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h3",{id:"healthblocks-iocoretheme"},"@healthblocks-io/core/theme"),(0,c.kt)("p",null,"This module provides helpers & hooks for the current theme"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useTheme } from '@healthblocks-io/core/theme'\n\nconst RocketLauncher = () => {\n  const theme = useTheme()\n  return <Button style={{ color: theme.color.primary }}>Launch</Button>\n}\n")),(0,c.kt)("h3",{id:"healthblocks-iocoreupload"},"@healthblocks-io/core/upload"),(0,c.kt)("p",null,"This module allows users to safely upload personal images."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-tsx"},"import { upload, useSignedURL } from '@healthblocks-io/core/upload'\n\nconst Camera = () => {\n  const takePicture = () => {\n    const file = await cameraRef.takePictureAsync()\n    const selfie = await upload(file)\n    // await updateProfile({ selfie })\n  }\n  return <Button onPress={takePicture}>Take picture</Button>\n}\n\nconst Avatar = () => {\n  const sign = useSignedURL()\n  const doc = useProfile()\n  return <Image source={{ uri: sign(doc.selfie.url) }} />\n}\n")))}m.isMDXComponent=!0}}]);