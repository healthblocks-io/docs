"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9436],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},85346:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return f},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return u}});var r=n(83117),a=n(80102),i=(n(67294),n(3905)),o=["components"],c={title:"Care Plan"},l=void 0,s={unversionedId:"blocks/care-plan-activities",id:"blocks/care-plan-activities",title:"Care Plan",description:"A care plan represents a list of planned/proposed care activities. These activities can be appointments and tasks like reading an article or filling in a questionnaire.",source:"@site/docs/blocks/care-plan-activities.md",sourceDirName:"blocks",slug:"/blocks/care-plan-activities",permalink:"/docs/blocks/care-plan-activities",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/blocks/care-plan-activities.md",tags:[],version:"current",frontMatter:{title:"Care Plan"},sidebar:"docs",previous:{title:"Health Profile",permalink:"/docs/blocks/health-profile"},next:{title:"Care Team",permalink:"/docs/blocks/care-team"}},p={},u=[{value:"Provider setup",id:"provider-setup",level:3}],d={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"A care plan represents a list of planned/proposed care activities. These activities can be appointments and tasks like reading an article or filling in a questionnaire."),(0,i.kt)("h3",{id:"provider-setup"},"Provider setup"),(0,i.kt)("p",null,"Enable the ",(0,i.kt)("inlineCode",{parentName:"p"},"useFHIR()")," hook using the ",(0,i.kt)("inlineCode",{parentName:"p"},"<FHIRProvider>"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { FHIRProvider } from '@healthblocks-io/core/fhir'\n\nfunction ProjectApp () {}\n  const auth = useAuthState()\n  if (!auth) return <SignInScreen />\n\n  return (\n    <FHIRProvider>\n      <CalendarScreen />\n    </FHIRProvider>\n  )\n}\n")),(0,i.kt)("p",null,"Now we can load the activities we want to show on a calendar:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useSearch } from '@healthblocks-io/core/fhir'\nimport { CarePlanActivity } from '@healthblocks-io/core/types'\nimport Calendar, { CalendarContext } from '@healthblocks-io/native/Calendar'\nimport Loading from '@healthblocks-io/native/Loading'\n\nfunction CalendarScreen() {\n  const search = useSearch<CarePlanActivity>({\n    type: 'CarePlan.Activity',\n  })\n\n  // This context is passed to calendar items\n  const refresh = search.refetch\n  const context = useMemo(() => ({ refresh }), [refresh])\n\n  if (!search.data?.entry) {\n    return <Loading />\n  }\n  if (!search.data.entry.length) {\n    return <EmptyScreen title=\"No activities\" />\n  }\n  return (\n    <CalendarContext.Provider value={context}>\n      <Calendar activities={search.data.entry} />\n    </CalendarContext.Provider>\n  )\n}\n")))}f.isMDXComponent=!0}}]);