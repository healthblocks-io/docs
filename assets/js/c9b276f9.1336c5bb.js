(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{106:function(e,t,o){"use strict";o.d(t,"a",(function(){return u})),o.d(t,"b",(function(){return d}));var n=o(0),r=o.n(n);function c(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){c(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)o=c[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)o=c[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=r.a.createContext({}),p=function(e){var t=r.a.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},u=function(e){var t=p(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,c=e.originalType,a=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(o),b=n,d=u["".concat(a,".").concat(b)]||u[b]||h[b]||c;return o?r.a.createElement(d,l(l({ref:t},s),{},{components:o})):r.a.createElement(d,l({ref:t},s))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=o.length,a=new Array(c);a[0]=b;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:n,a[1]=l;for(var s=2;s<c;s++)a[s]=o[s];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,o)}b.displayName="MDXCreateElement"},97:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return a})),o.d(t,"metadata",(function(){return l})),o.d(t,"toc",(function(){return i})),o.d(t,"default",(function(){return p}));var n=o(3),r=o(7),c=(o(0),o(106)),a={title:"Examples"},l={unversionedId:"@healthblocks-io/core/examples",id:"@healthblocks-io/core/examples",isDocsHomePage:!1,title:"Examples",description:"@healthblocks-io/core/app",source:"@site/docs/@healthblocks-io/core/examples.md",slug:"/@healthblocks-io/core/examples",permalink:"/docs/@healthblocks-io/core/examples",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/@healthblocks-io/core/examples.md",version:"current",sidebar:"docs",previous:{title:"Examples",permalink:"/docs/@healthblocks-io/apollo/examples"},next:{title:"Mixpanel analytics integration",permalink:"/docs/@healthblocks-io/core/mixpanel"}},i=[{value:"@healthblocks-io/core/app",id:"healthblocks-iocoreapp",children:[]},{value:"@healthblocks-io/core/auth",id:"healthblocks-iocoreauth",children:[]},{value:"@healthblocks-io/core/project",id:"healthblocks-iocoreproject",children:[]},{value:"@healthblocks-io/core/theme",id:"healthblocks-iocoretheme",children:[]},{value:"@healthblocks-io/core/upload",id:"healthblocks-iocoreupload",children:[]}],s={toc:i};function p(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},s,o,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h3",{id:"healthblocks-iocoreapp"},"@healthblocks-io/core/app"),Object(c.b)("p",null,"This store should be initialized when the application starts."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-tsx"},"import { useHealthblocks, initialize } from '@healthblocks/core/app'\n\ninitialize({\n  pid: 'dr-corona',\n})\n\n// TODO: considering <HealthblocksProvider> (doesn't exist)\n")),Object(c.b)("h3",{id:"healthblocks-iocoreauth"},"@healthblocks-io/core/auth"),Object(c.b)("p",null,"This store contains data related to sign in, JWT tokens, refresh tokens. ",Object(c.b)("inlineCode",{parentName:"p"},"setAuth()")," accepts a JWT token or an AuthState object which typically looks like ",Object(c.b)("inlineCode",{parentName:"p"},'{ id_token: "..." }')),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-tsx"},"import { signInAnonymously, useAuth, useUser } from '@healthblocks/core/auth'\n\nconst SignIn = () => (\n  <Button onPress={() => signInAnonymously(email, password)} />\n)\n\nconst SignInScreen = () => {\n  const { id_token, loading, signInError } = useAuth()\n  const { sub, name, email } = useUser() // Decoded JWT\n}\n")),Object(c.b)("h3",{id:"healthblocks-iocoreproject"},"@healthblocks-io/core/project"),Object(c.b)("p",null,"This store contains a cache of projects that have been opened. This will allow to switch between projects on the fly. This store might subscribe to the current project data, currently it does not."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-tsx"},"import { useProject } from '@healthblocks/core/project'\n\nconst Greeting = () => {\n  const project = useProject()\n  return <Text>Welcome to {project.config.appName}</Text>\n}\n")),Object(c.b)("h3",{id:"healthblocks-iocoretheme"},"@healthblocks-io/core/theme"),Object(c.b)("p",null,"This module provides helpers & hooks for the current theme"),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-tsx"},"import { useTheme } from '@healthblocks/core/theme'\n\nconst RocketLauncher = () => {\n  const theme = useTheme()\n  return <Button style={{ color: theme.color.primary }}>Launch</Button>\n}\n")),Object(c.b)("h3",{id:"healthblocks-iocoreupload"},"@healthblocks-io/core/upload"),Object(c.b)("p",null,"This module allows users to safely upload personal images."),Object(c.b)("pre",null,Object(c.b)("code",{parentName:"pre",className:"language-tsx"},"import { upload, useSignedURL } from '@healthblocks/core/upload'\n\nconst Camera = () => {\n  const takePicture = () => {\n    const file = await cameraRef.takePictureAsync()\n    const selfie = await upload(file)\n    // await updateProfile({ selfie })\n  }\n  return <Button onPress={takePicture}>Take picture</Button>\n}\n\nconst Avatar = () => {\n  const sign = useSignedURL()\n  const doc = useProfile()\n  return <Image source={{ uri: sign(doc.selfie.url) }} />\n}\n")))}p.isMDXComponent=!0}}]);