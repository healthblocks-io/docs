"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[332],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=a,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return t?r.createElement(f,i(i({ref:n},s),{},{components:t})):r.createElement(f,i({ref:n},s))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},13152:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var r=t(87462),a=t(63366),o=(t(67294),t(3905)),i=["components"],l={title:"Mixpanel analytics integration"},c=void 0,p={unversionedId:"examples/@healthblocks-io/core/mixpanel",id:"examples/@healthblocks-io/core/mixpanel",isDocsHomePage:!1,title:"Mixpanel analytics integration",description:"Basic",source:"@site/docs/examples/@healthblocks-io/core/mixpanel.md",sourceDirName:"examples/@healthblocks-io/core",slug:"/examples/@healthblocks-io/core/mixpanel",permalink:"/docs/examples/@healthblocks-io/core/mixpanel",editUrl:"https://github.com/healthblocks-io/docs/edit/main/docs/examples/@healthblocks-io/core/mixpanel.md",tags:[],version:"current",frontMatter:{title:"Mixpanel analytics integration"}},s=[{value:"Basic",id:"basic",children:[{value:"Advanced (TODO)",id:"advanced-todo",children:[],level:3},{value:"Creating analytics plugins",id:"creating-analytics-plugins",children:[],level:3}],level:2}],u={toc:s};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"basic"},"Basic"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@healthblocks-io/core/analytics")," provides basic event tracking with optional mixpanel integration based on project configuration."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"// Load Mixpanel token and hook into track()\nimport '@healthblocks-io/core/mixpanel'\nimport { track } from '@healthblocks-io/core/analytics'\n\ntrack('Activity Started', { any: 'details' })\n")),(0,o.kt)("p",null,"These events are saved in Mixpanel AND Healthblocks."),(0,o.kt)("h3",{id:"advanced-todo"},"Advanced (TODO)"),(0,o.kt)("p",null,"Mixpanel provides more options, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"people_increment"),". These are not supported by Healthblocks at the moment. Therefor you can use Mixpanel directly:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useMixpanel, MixpanelProvider } from '@healthblocks-io/core/mixpanel'\n\nconst App = () => (\n  <MixpanelProvider>\n    <MyButton />\n  </MixpanelProvider>\n)\n\nconst MyButton = () => {\n  const mixpanel = useMixpanel()\n  return <Button onPress={() => mixpanel.people_increment()} />\n}\n")),(0,o.kt)("h3",{id:"creating-analytics-plugins"},"Creating analytics plugins"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { install } from '@healthblocks-io/core/analytics'\n\ninstall({\n  async track(data) {\n    const { pid } = app()\n    postJSON(TRACK_API + '/track', data)\n  },\n})\n")))}m.isMDXComponent=!0}}]);